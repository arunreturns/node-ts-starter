{"version":3,"sources":["config/LoggerConfig.ts","config/ServerConfig.ts","config/DatabaseConfig.ts","schema/CustomerModel.ts","models/Customer.ts","utils/CustomerMapper.ts","models/Response.ts","service/CustomerService.ts","controller/CustomerController.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["import { createLogger, format, transports, Logger } from 'winston';\r\n\r\nconst logFormatter = (info: any) => {\r\n  const { timestamp, message } = info;\r\n  return `${timestamp} - ${message}`;\r\n};\r\n\r\nconst logger: Logger = createLogger({\r\n  level: process.env.LOGGER_LOGLEVEL || 'debug',\r\n  format: format.combine(\r\n    format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\r\n    format.colorize({ all: true }),\r\n    format.printf(logFormatter)\r\n  ),\r\n  transports: [new transports.Console()]\r\n});\r\n\r\nexport default logger;\r\n","import chalk from \"chalk\";\r\nimport bodyParser from \"body-parser\";\r\nimport methodOverride from \"method-override\";\r\nimport morgan from \"morgan\";\r\nimport helmet from \"helmet\";\r\nimport compression from \"compression\";\r\n// const path = require('path'); const favicon = require(\"serve-favicon\");\r\nimport initStats from \"@phil-r/stats\";\r\nimport errorhandler from \"errorhandler\";\r\nimport cors from \"cors\";\r\nimport expressStatusMonitor from \"express-status-monitor\";\r\n// const csrf = require('csurf')\r\nimport protect from \"@risingstack/protect\";\r\nimport logger from \"./LoggerConfig\";\r\nimport { Application } from \"express\";\r\n\r\nclass ServerConfig {\r\n  static configureServer(app: Application) {\r\n    logger.info(`${chalk.yellow(\"⚒\")} Configuring server`);\r\n    // app.use(favicon(path.join(__dirname, 'favicon.ico')));\r\n    const { statsMiddleware, getStats } = initStats({\r\n      endpointStats: true,\r\n      customStats: true,\r\n      addHeader: true,\r\n    });\r\n\r\n    /* Enable CSRF */\r\n    // app.use(csrf({cookie: true}))\r\n\r\n    /* Log API requests */\r\n    app.use(morgan(\"dev\"));\r\n    /* Use bodyParser */\r\n    app.use(bodyParser.json());\r\n    app.use(bodyParser.json({ type: \"application/vnd.api+json\" }));\r\n    app.use(bodyParser.urlencoded({ extended: true }));\r\n    /* Use methodOverride */\r\n    app.use(methodOverride(\"X-HTTP-Method-Override\"));\r\n    /* Helmet is actually just a collection of nine smaller middleware functions\r\n     that set security-related HTTP headers */\r\n    app.use(helmet());\r\n    /* Gzip compressing can greatly decrease the size of the response body\r\n     and hence increase the speed of a web app */\r\n    app.use(compression());\r\n    /* Middleware for monitoring express status */\r\n    app.use(expressStatusMonitor());\r\n    /* Stats */\r\n    app.use(statsMiddleware);\r\n    app.get(\"/stats\", (req, res) => res.send(getStats()));\r\n\r\n    /* Enable CORS */\r\n    app.use(cors());\r\n\r\n    if (process.env.NODE_ENV === \"development\") {\r\n      // Only add errorHandler for development\r\n      app.use(errorhandler());\r\n    }\r\n    /* Protect the API */\r\n    app.use(\r\n      protect.express.sqlInjection({\r\n        body: true,\r\n        loggerFunction: logger.error,\r\n      }),\r\n    );\r\n\r\n    app.use(protect.express.xss({ body: true, loggerFunction: logger.error }));\r\n\r\n    // app.use(protect.express.rateLimiter({   db: client,   id: (request) =>\r\n    // request.connection.remoteAddress }))\r\n\r\n    logger.info(`${chalk.yellow(\"⚒\")} Server configuration completed`);\r\n  }\r\n}\r\n\r\nexport default ServerConfig;\r\n","import mongoose from \"mongoose\";\r\nimport { Application } from \"express\";\r\nimport chalk from \"chalk\";\r\nimport logger from \"./LoggerConfig\";\r\n\r\nclass DatabaseConfig {\r\n  static connectToDatabase(app: Application) {\r\n    logger.info(`${chalk.yellow(\"⚒\")} Configuring database`);\r\n\r\n    mongoose.set(\"useFindAndModify\", false);\r\n    mongoose.set(\"useCreateIndex\", true);\r\n    mongoose.set(\"useNewUrlParser\", true);\r\n    mongoose.set(\"useUnifiedTopology\", true);\r\n    mongoose.connect(process.env.MONGO_URI);\r\n    mongoose.connection\r\n      .on(\"open\", () => {\r\n        logger.info(`${chalk.yellow(\"✓\")} MongoDB connected.`);\r\n      })\r\n      .on(\"error\", (err: any) => {\r\n        logger.error(err);\r\n        logger.info(\r\n          `${chalk.red(\r\n            \"✗\",\r\n          )} MongoDB connection error. Please make sure MongoDB is running.`,\r\n        );\r\n        process.exit();\r\n      });\r\n  }\r\n}\r\n\r\nexport default DatabaseConfig;\r\n","import mongoose, { Schema } from \"mongoose\";\r\n\r\nconst CustomerSchema: Schema = new Schema({\r\n  name: {\r\n    type: mongoose.Schema.Types.String,\r\n    required: true,\r\n  },\r\n  email: {\r\n    type: mongoose.Schema.Types.String,\r\n    unique: true,\r\n    required: true,\r\n  },\r\n  phone: {\r\n    type: mongoose.Schema.Types.String,\r\n    unique: true,\r\n    required: true,\r\n  },\r\n});\r\n\r\nCustomerSchema.virtual(\"id\").get(() => this._id);\r\n\r\nconst CustomerModel = mongoose.model(\"Customer\", CustomerSchema, \"Customer\");\r\n\r\nexport default CustomerModel;\r\n","class Customer {\r\n  constructor(name?: string, email?: string, phone?: string) {\r\n    this.name = name;\r\n    this.email = email;\r\n    this.phone = phone;\r\n  }\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n}\r\n\r\nexport default Customer;\r\n","import Customer from \"../models/Customer\";\r\nimport { Document } from \"mongoose\";\r\n\r\nclass CustomerMapper {\r\n  static mapCustomer(customer: Document) {\r\n    const customerCopy = new Customer();\r\n    customerCopy.id = customer.get(\"_id\");\r\n    customerCopy.name = customer.get(\"name\");\r\n    customerCopy.email = customer.get(\"email\");\r\n    customerCopy.phone = customer.get(\"phone\");\r\n    return customerCopy;\r\n  }\r\n  static mapCustomers(customers: Document[]): Customer[] {\r\n    return customers.map(this.mapCustomer);\r\n  }\r\n}\r\n\r\nexport default CustomerMapper;\r\n","class Response<T> {\r\n  constructor() {\r\n    this.body = {\r\n      errors: [],\r\n    };\r\n  }\r\n  body: {\r\n    data?: T;\r\n    errors?: String[];\r\n  };\r\n  status: number;\r\n}\r\n\r\nexport default Response;\r\n","import logger from \"../config/LoggerConfig\";\r\nimport Customer from \"../models/Customer\";\r\nimport CustomerModel from \"../schema/CustomerModel\";\r\nimport CustomerMapper from \"../utils/CustomerMapper\";\r\nimport Response from \"../models/Response\";\r\n\r\nclass CustomerService {\r\n  static async getCustomerFromDB(): Promise<Response<Customer[]>> {\r\n    const response = new Response<Customer[]>();\r\n    try {\r\n      logger.info(\"[CustomerService] Inside getCustomerFromDB\");\r\n      const resp = await CustomerModel.find({});\r\n      response.body.data = CustomerMapper.mapCustomers(resp);\r\n      response.status = 200;\r\n    } catch (error) {\r\n      logger.error(\"[CustomerService] Error in getCustomerFromDB \", error);\r\n      response.body.errors.push(error);\r\n      response.status = 500;\r\n    }\r\n    return response;\r\n  }\r\n\r\n  static async addCustomerToDB(\r\n    customer: Customer,\r\n  ): Promise<Response<Customer>> {\r\n    const response = new Response<Customer>();\r\n    try {\r\n      logger.info(\"[CustomerService] Inside addCustomerToDB \", customer);\r\n      const newCustomer = new CustomerModel();\r\n      newCustomer.set(\"name\", customer.name);\r\n      newCustomer.set(\"email\", customer.email);\r\n      newCustomer.set(\"phone\", customer.phone);\r\n      const resp = await newCustomer.save();\r\n      response.body.data = CustomerMapper.mapCustomer(resp);\r\n      response.status = 200;\r\n    } catch (error) {\r\n      logger.error(\"[CustomerService] Error in addCustomerToDB \", error);\r\n      response.body.errors.push(error);\r\n      response.status = 500;\r\n    }\r\n    return response;\r\n  }\r\n\r\n  static async deleteCustomerFromDB(id: string): Promise<Response<Customer>> {\r\n    const response = new Response<Customer>();\r\n    try {\r\n      logger.info(\"[CustomerService] Inside deleteCustomerFromDB \" + id);\r\n      const resp = await CustomerModel.findByIdAndDelete(id);\r\n      if (resp === null) {\r\n        response.body.errors.push(\"No data found for this id \" + id);\r\n        response.status = 500;\r\n      } else {\r\n        response.body.data = CustomerMapper.mapCustomer(resp);\r\n        response.status = 200;\r\n      }\r\n    } catch (error) {\r\n      logger.error(\"[CustomerService] Error in deleteCustomerFromDB\" + error);\r\n      response.body.errors.push(error);\r\n      response.status = 500;\r\n    }\r\n    return response;\r\n  }\r\n}\r\n\r\nexport default CustomerService;\r\n","import { Request, Response, Application } from \"express\";\r\nimport logger from \"../config/LoggerConfig\";\r\nimport CustomerService from \"../service/CustomerService\";\r\nimport Customer from \"../models/Customer\";\r\n\r\nclass CustomerController {\r\n  static registerController(app: Application, url: string = \"/customer\") {\r\n    app.get(`${url}/getCustomer`, this.getCustomer);\r\n    app.post(`${url}/addCustomer`, this.addCustomer);\r\n    app.delete(`${url}/deleteCustomer/:id`, this.deleteCustomer);\r\n  }\r\n\r\n  static async getCustomer(req: Request, res: Response) {\r\n    logger.info(\"[CustomerController] Inside getCustomer\");\r\n    const resp = await CustomerService.getCustomerFromDB();\r\n    logger.info(\"[CustomerController] getCustomer - Response\", resp);\r\n    res.status(resp.status).send(resp.body);\r\n  }\r\n\r\n  static async addCustomer(req: Request, res: Response) {\r\n    logger.info(\"[CustomerController] Inside addCustomer\");\r\n    const newCustomer = new Customer(\r\n      req.body.name,\r\n      req.body.email,\r\n      req.body.phone,\r\n    );\r\n    const resp = await CustomerService.addCustomerToDB(newCustomer);\r\n    logger.info(\"[CustomerController] addCustomer - Response\", resp);\r\n    res.status(resp.status).send(resp.body);\r\n  }\r\n\r\n  static async deleteCustomer(req: Request, res: Response) {\r\n    logger.info(\"[CustomerController] Inside deleteCustomer\");\r\n    const resp = await CustomerService.deleteCustomerFromDB(req.params.id);\r\n    logger.info(\"[CustomerController] deleteCustomer - Response\", resp);\r\n    res.status(resp.status).send(resp.body);\r\n  }\r\n}\r\n\r\nexport default CustomerController;\r\n","import express from \"express\";\nimport dotenv from \"dotenv\";\nimport chalk from \"chalk\";\nimport ServerConfig from \"./config/ServerConfig\";\nimport DatabaseConfig from \"./config/DatabaseConfig\";\nimport Logger from \"./config/LoggerConfig\";\nimport CustomerController from \"./controller/CustomerController\";\n// import swaggerConfig from \"./config/swaggerConfig\";\n\nconst app: express.Application = express();\ndotenv.config();\n/* Configure and connect to the database */\nDatabaseConfig.connectToDatabase(app);\n/* Configure the server with additional features */\nServerConfig.configureServer(app);\n\n/* Configure swagger */\n// swaggerConfig(app);\n\n/* Connect the various routes to the application */\nCustomerController.registerController(app);\n\nconst IP = process.env.HOST || \"localhost\";\nconst PORT = process.env.PORT || 8080;\napp.listen(PORT, () => {\n  Logger.info(\n    `${chalk.yellow(\"★\")} Application running in http://${IP}:${PORT}`,\n  );\n});\n\nmodule.exports = app;\n"]}